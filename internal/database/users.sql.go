// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUnRegUsers = `-- name: CreateUnRegUsers :one
INSERT INTO Unregisteredusers(created_at, updated_at,whatsapp_number,display_name)
VALUES (
$1, 
$2, 
$3, 
$4
)
RETURNING id, created_at, updated_at, whatsapp_number, display_name
`

type CreateUnRegUsersParams struct {
	CreatedAt      time.Time
	UpdatedAt      time.Time
	WhatsappNumber string
	DisplayName    string
}

func (q *Queries) CreateUnRegUsers(ctx context.Context, arg CreateUnRegUsersParams) (Unregistereduser, error) {
	row := q.db.QueryRowContext(ctx, createUnRegUsers,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.WhatsappNumber,
		arg.DisplayName,
	)
	var i Unregistereduser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WhatsappNumber,
		&i.DisplayName,
	)
	return i, err
}

const getUnRegUsers = `-- name: GetUnRegUsers :one
SELECT id, created_at, updated_at, whatsapp_number, display_name FROM Unregisteredusers
WHERE whatsapp_number = $1
`

func (q *Queries) GetUnRegUsers(ctx context.Context, whatsappNumber string) (Unregistereduser, error) {
	row := q.db.QueryRowContext(ctx, getUnRegUsers, whatsappNumber)
	var i Unregistereduser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.WhatsappNumber,
		&i.DisplayName,
	)
	return i, err
}
