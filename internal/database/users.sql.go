// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO UnvalidatedUsers(id, created_at,whatsapp_number,display_name)
VALUES (
$1, 
$2, 
$3, 
$4
)
RETURNING id, created_at, whatsapp_number, display_name
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	WhatsappNumber string
	DisplayName    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Unvalidateduser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.WhatsappNumber,
		arg.DisplayName,
	)
	var i Unvalidateduser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.WhatsappNumber,
		&i.DisplayName,
	)
	return i, err
}

const getUserWhatsappNumber = `-- name: GetUserWhatsappNumber :one

SELECT id, created_at, whatsapp_number, display_name FROM UnvalidatedUsers 
WHERE whatsapp_number = $1
`

func (q *Queries) GetUserWhatsappNumber(ctx context.Context, whatsappNumber string) (Unvalidateduser, error) {
	row := q.db.QueryRowContext(ctx, getUserWhatsappNumber, whatsappNumber)
	var i Unvalidateduser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.WhatsappNumber,
		&i.DisplayName,
	)
	return i, err
}
