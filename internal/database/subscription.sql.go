// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subscription.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUserSubscription = `-- name: CreateUserSubscription :exec
INSERT INTO Subscription (subscription_id, userid, expiry_date)
VALUES($1, $2, $3)
`

type CreateUserSubscriptionParams struct {
	SubscriptionID uuid.UUID
	Userid         uuid.NullUUID
	ExpiryDate     time.Time
}

func (q *Queries) CreateUserSubscription(ctx context.Context, arg CreateUserSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, createUserSubscription, arg.SubscriptionID, arg.Userid, arg.ExpiryDate)
	return err
}

const getUserSubscription = `-- name: GetUserSubscription :one

SELECT subscription_id, userid, expiry_date, subscription_status, subscription_tier FROM Subscription
WHERE userid = $1
`

func (q *Queries) GetUserSubscription(ctx context.Context, userid uuid.NullUUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getUserSubscription, userid)
	var i Subscription
	err := row.Scan(
		&i.SubscriptionID,
		&i.Userid,
		&i.ExpiryDate,
		&i.SubscriptionStatus,
		&i.SubscriptionTier,
	)
	return i, err
}
